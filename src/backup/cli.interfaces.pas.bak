unit CLI.Interfaces;

{$mode objfpc}{$H+}

interface

uses
  Classes, SysUtils;

type
  { Command parameter types }
  TParamType = (ptString, ptInteger, ptBoolean, ptFloat);

  { Interface for parameter/flag definition }
  ICommandParameter = interface
    ['{A1B2C3D4-E5F6-47G8-H9I0-J1K2L3M4N5O6}']
    function GetShortFlag: string;
    function GetLongFlag: string;
    function GetDescription: string;
    function GetRequired: Boolean;
    function GetParamType: TParamType;
    function GetDefaultValue: string;
    
    property ShortFlag: string read GetShortFlag;
    property LongFlag: string read GetLongFlag;
    property Description: string read GetDescription;
    property Required: Boolean read GetRequired;
    property ParamType: TParamType read GetParamType;
    property DefaultValue: string read GetDefaultValue;
  end;

  { Interface for command definition }
  ICommand = interface
    ['{B2C3D4E5-F6G7-48H9-I0J1-K2L3M4N5O6P7}']
    function GetName: string;
    function GetDescription: string;
    function GetParameters: specalize TArray<ICommandParameter>;
    function Execute: Integer;
    
    property Name: string read GetName;
    property Description: string read GetDescription;
    property Parameters: specialize TArray<ICommandParameter> read GetParameters;
  end;

  { Interface for progress indicators }
  IProgressIndicator = interface
    ['{C3D4E5F6-G7H8-49I0-J1K2-L3M4N5O6P7Q8}']
    procedure Start;
    procedure Stop;
    procedure Update(const Progress: Integer); // 0-100 for percentage
  end;

  { Interface for the CLI application }
  ICLIApplication = interface
    ['{D4E5F6G7-H8I9-4AJ0-K1L2-M3N4O5P6Q7R8}']
    procedure RegisterCommand(const Command: ICommand);
    function Execute: Integer;
  end;

implementation

end. 
