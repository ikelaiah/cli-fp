unit CLI.Progress;

{$mode objfpc}{$H+}

interface

uses
  Classes, SysUtils, CLI.Interfaces;

type
  { Base class for progress indicators }
  TBaseProgressIndicator = class(TInterfacedObject, IProgressIndicator)
  private
    FActive: Boolean;
    FLastUpdate: TDateTime;
    procedure ClearLine;
  protected
    procedure WriteToConsole(const Text: string); virtual;
  public
    procedure Start; virtual;
    procedure Stop; virtual;
    procedure Update(const Progress: Integer); virtual; abstract;
  end;

  { Spinning widget styles }
  TSpinnerStyle = (ssLine, ssDot);

  { Spinning widget implementation }
  TSpinningIndicator = class(TBaseProgressIndicator)
  private
    FCurrentIndex: Integer;
    FStyle: TSpinnerStyle;
    FLineChars: array[0..3] of Char;
    FDotChars: array[0..3] of Char;
    function GetCurrentChar: Char;
  public
    constructor Create(const AStyle: TSpinnerStyle);
    procedure Update(const Progress: Integer); override;
  end;

  { Progress bar implementation }
  TProgressBar = class(TBaseProgressIndicator)
  private
    FWidth: Integer;
    FLastPercentage: Integer;
  public
    constructor Create(const AWidth: Integer = 50);
    procedure Update(const Progress: Integer); override;
  end;

{ Helper functions to create progress indicators }
function CreateSpinner(const Style: TSpinnerStyle = ssLine): IProgressIndicator;
function CreateProgressBar(const Width: Integer = 50): IProgressIndicator;

implementation

uses
{$IFDEF WINDOWS}
  Windows;
{$ELSE}
  BaseUnix, termio;
{$ENDIF}

{ TBaseProgressIndicator }

procedure TBaseProgressIndicator.ClearLine;
begin
  Write(#13);  // Carriage return
  Write('                                                  ');  // Clear line
  Write(#13);  // Return to start
end;

procedure TBaseProgressIndicator.WriteToConsole(const Text: string);
begin
  ClearLine;
  Write(Text);
end;

procedure TBaseProgressIndicator.Start;
begin
  FActive := True;
  FLastUpdate := Now;
end;

procedure TBaseProgressIndicator.Stop;
begin
  if FActive then
  begin
    ClearLine;
    FActive := False;
  end;
end;

{ TSpinningIndicator }

constructor TSpinningIndicator.Create(const AStyle: TSpinnerStyle);
begin
  inherited Create;
  FStyle := AStyle;
  FCurrentIndex := 0;
  
  // Initialize spinner characters
  FLineChars[0] := '-';
  FLineChars[1] := '\';
  FLineChars[2] := '|';
  FLineChars[3] := '/';
  
  FDotChars[0] := '.';
  FDotChars[1] := 'o';
  FDotChars[2] := 'O';
  FDotChars[3] := 'o';
end;

function TSpinningIndicator.GetCurrentChar: Char;
begin
  case FStyle of
    ssLine: Result := FLineChars[FCurrentIndex];
    ssDot: Result := FDotChars[FCurrentIndex];
  end;
end;

procedure TSpinningIndicator.Update(const Progress: Integer);
begin
  if not FActive then
    Exit;
    
  // Update every 100ms
  if MilliSecondsBetween(Now, FLastUpdate) < 100 then
    Exit;
    
  WriteToConsole(GetCurrentChar);
  FCurrentIndex := (FCurrentIndex + 1) mod 4;
  FLastUpdate := Now;
end;

{ TProgressBar }

constructor TProgressBar.Create(const AWidth: Integer);
begin
  inherited Create;
  FWidth := AWidth;
  FLastPercentage := -1;
end;

procedure TProgressBar.Update(const Progress: Integer);
var
  FilledWidth: Integer;
  EmptyWidth: Integer;
  ProgressText: string;
  i: Integer;
begin
  if not FActive then
    Exit;
    
  if Progress = FLastPercentage then
    Exit;
    
  FLastPercentage := Progress;
  
  // Calculate the width of the filled portion
  FilledWidth := (Progress * FWidth) div 100;
  EmptyWidth := FWidth - FilledWidth;
  
  ProgressText := '[';
  
  // Add filled portion
  for i := 1 to FilledWidth do
    ProgressText := ProgressText + '=';
    
  // Add empty portion
  for i := 1 to EmptyWidth do
    ProgressText := ProgressText + ' ';
    
  ProgressText := ProgressText + '] ' + IntToStr(Progress) + '%';
  
  WriteToConsole(ProgressText);
end;

{ Helper functions }

function CreateSpinner(const Style: TSpinnerStyle): IProgressIndicator;
begin
  Result := TSpinningIndicator.Create(Style);
end;

function CreateProgressBar(const Width: Integer): IProgressIndicator;
begin
  Result := TProgressBar.Create(Width);
end;

end.
